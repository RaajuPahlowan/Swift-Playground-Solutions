func turnLock(up: Bool, numberOfTimes: Int){
    for i in 1...numberOfTimes{
        if up == true{
            expert.turnLockUp()
        }
        else if up == false {
            expert.turnLockDown()
        }
    }
}
func move(count: Int){
    for i in 1...count{
        character.moveForward()
    }
}
func turn(){
    character.turnLeft()
    character.turnLeft()
}
func turnLeft(){
    character.turnLeft()
}
func turnRight(){
    character.turnRight()
}
func turnEX(){
    expert.turnRight()
}
func collectGems(){
    character.collectGem()
}

turnLock(up: true, numberOfTimes: 4)
move(count: 2)
turnRight()
collectGems()
move(count: 2)
collectGems()
turn()
move(count: 1)
turnLock(up: false, numberOfTimes: 3)
turnRight()
move(count: 1)
collectGems()
turn()
move(count: 2)
turnLeft()
turnEX()
turnLock(up: true, numberOfTimes: 1)
move(count: 2)
collectGems()
turn()
move(count: 2)
turnLeft()
move(count: 2)
turnLeft()
turnEX()
turnLock(up: true, numberOfTimes: 1)
move(count: 2)
collectGems()
turn()
move(count: 2)
turnLeft()
turnEX()
turnLock(up: true, numberOfTimes: 1)
move(count: 2)
collectGems()
turn()
move(count: 1)
turnLock(up: true, numberOfTimes: 3)
turnRight()
move(count: 1)
collectGems()
